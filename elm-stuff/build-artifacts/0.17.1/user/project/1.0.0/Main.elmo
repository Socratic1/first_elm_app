var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$initialModel = {randomizeModel: _user$project$Randomize$initialModel, counterModel: _user$project$Counter$initialModel, fetchModel: _user$project$Fetch$initialModel};
var _user$project$Main$init = {ctor: '_Tuple2', _0: _user$project$Main$initialModel, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Main$AppModel = F3(
	function (a, b, c) {
		return {randomizeModel: a, counterModel: b, fetchModel: c};
	});
var _user$project$Main$FetchMsg = function (a) {
	return {ctor: 'FetchMsg', _0: a};
};
var _user$project$Main$CounterMsg = function (a) {
	return {ctor: 'CounterMsg', _0: a};
};
var _user$project$Main$RandomizeMsg = function (a) {
	return {ctor: 'RandomizeMsg', _0: a};
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html_App$map,
				_user$project$Main$RandomizeMsg,
				_user$project$Randomize$view(model.randomizeModel)),
				A2(
				_elm_lang$html$Html_App$map,
				_user$project$Main$CounterMsg,
				_user$project$Counter$view(model.counterModel)),
				A2(
				_elm_lang$html$Html_App$map,
				_user$project$Main$FetchMsg,
				_user$project$Fetch$view(model.fetchModel))
			]));
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'RandomizeMsg':
				var _p1 = A2(_user$project$Randomize$update, _p0._0, model.randomizeModel);
				var updatedRandomizeModel = _p1._0;
				var randomizeCmd = _p1._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{randomizeModel: updatedRandomizeModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$RandomizeMsg, randomizeCmd)
				};
			case 'CounterMsg':
				var _p2 = A2(_user$project$Counter$update, _p0._0, model.counterModel);
				var updatedCounterModel = _p2._0;
				var counterCmd = _p2._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{counterModel: updatedCounterModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$CounterMsg, counterCmd)
				};
			default:
				var _p3 = A2(_user$project$Fetch$update, _p0._0, model.fetchModel);
				var updatedFetchModel = _p3._0;
				var fetchCmd = _p3._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{fetchModel: updatedFetchModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$FetchMsg, fetchCmd)
				};
		}
	});
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})
};
